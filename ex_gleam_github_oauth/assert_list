src/store.gleam:    let assert Ok(port) = env.get_string("REDIS_PORT")
src/store.gleam:    let assert Ok(port) = int.parse(port)
src/store.gleam:  let assert Ok(redis_password) = env.get_string("REDIS_PASSWORD")
src/store.gleam:  let assert Ok(redis_host) = env.get_string("REDIS_HOST")
src/router.gleam:      let assert Ok(client) = store.setup()
src/router.gleam:      let assert Ok(token) = store.get(client, "gh_token")
src/router.gleam:      let assert Ok(user_info) = github_user.fetch_user_info(token)
src/ex_gleam_github_oauth.gleam:  let assert Ok(_) =
src/web/auth.gleam:  let assert Ok(client_id) = env.get_string("CLIENT_ID")
src/web/auth.gleam:  let assert Ok(client) = store.setup()
src/web/auth.gleam:  let assert Ok(_) = store.set(client, "state", state)
src/web/auth.gleam:  let assert Ok(client_id) = env.get_string("CLIENT_ID")
src/web/auth.gleam:  let assert Ok(client_secret) = env.get_string("CLIENT_SECRET")
src/web/auth.gleam:  let assert Ok(client) = store.setup()
src/web/auth.gleam:  let assert Ok(_) = store.set(client, "state", state)
src/web/auth.gleam:  let assert Ok(code) =
src/web/callback.gleam:  let assert Ok(client_id) = env.get_string("CLIENT_ID")
src/web/callback.gleam:  let assert Ok(client_secret) = env.get_string("CLIENT_SECRET")
src/web/callback.gleam:  let assert Ok(state) =
src/web/callback.gleam:  let assert Ok(client) = store.setup()
src/web/callback.gleam:  let assert Ok(code) =
src/web/callback.gleam:      let assert Ok(client) = store.setup()
src/web/callback.gleam:      let assert Ok(_) = store.set(client, "gh_token", token.access_token)
src/web/callback.gleam:  let assert Ok(req) =
